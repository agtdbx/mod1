#version 430 core

layout (local_size_x = 8, local_size_y = 1, local_size_z = 1) in;

layout(r32f, binding = 0) uniform imageBuffer mapDensitiesBuffer;
layout(std430, binding = 1) readonly buffer DataBuffer {
	int gridBuffer[];
};

uniform float			smoothingRadius;
uniform float			invSmoothingRadius;
uniform float			smoothingScale;
uniform float			waterMass;
uniform float			targetDensity;
uniform float			pressureMultiplier;
uniform int				mapBufferCellSize;
uniform int				mapBufferW;
uniform int				mapBufferIdHsize;
uniform int				mapBufferSize;
uniform int				gridW;
uniform int				gridH;
uniform int				gridD;
uniform int				idHsize;
uniform int				gridSize;
uniform samplerBuffer	positionsBuffer;


float	vecLength(vec3 vec)
{
	return (sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z));
}


float	smoothingKernel(float dst)
{
	if (dst > smoothingRadius)
		return (0.0);

	return (pow(smoothingRadius - dst, 2) * smoothingScale);
}


float	calculateDensity(vec3 position)
{
	float	density, dst, influence;
	int		px, py, pz, gx, gy, gz, gid, nbParticleInCell, waterId;
	vec3	pos;

	density = 0.0;
	px = int(position.x * invSmoothingRadius);
	py = int(position.y * invSmoothingRadius);
	pz = int(position.z * invSmoothingRadius);

	for (int cx = -1; cx <= 1; cx++)
	{
		gx = px + cx;
		if (gx < 0 || gx >= gridW)
			continue;

		for (int cy = -1; cy <= 1; cy++)
		{
			gy = py + cy;
			if (gy < 0 || gy >= gridH)
				continue;

			for (int cz = -1; cz <= 1; cz++)
			{
				gz = pz + cz;
				if (gz < 0 || gz >= gridD)
					continue;

				gid = gx + gz * gridW + gy * idHsize;
				nbParticleInCell = gridBuffer[gid];
				for (int i = 0; i < nbParticleInCell; i++)
				{
					gid += gridSize;
					waterId = gridBuffer[gid];
					pos = texelFetch(positionsBuffer, waterId).rgb;
					dst = vecLength(pos - position);
					influence = smoothingKernel(dst);
					density += waterMass * influence;
				}
			}
		}
	}

	return (density);
}


void main()
{
	int		particleIndex, idXZ, x, y, z;
	float	density, pressure;
	vec3	position;

	particleIndex = int(gl_GlobalInvocationID.x);
	if (particleIndex >= mapBufferSize)
		return ;

	y = int(particleIndex / mapBufferIdHsize);
	idXZ = particleIndex - (y * mapBufferIdHsize);
	z = int(idXZ / mapBufferW);
	x = idXZ - (z * mapBufferW);

	position = vec3(x, y, z) * mapBufferCellSize;
	density = calculateDensity(position);

	// Write the values to the buffers
	imageStore(mapDensitiesBuffer, particleIndex, vec4(density, 0.0, 0.0, 1.0));
}
