#version 430 core

layout (local_size_x = 8, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform imageBuffer velocitiesBuffer;
layout(std430, binding = 1) readonly buffer DataBuffer {
	int gridBuffer[];
};

uniform float			delta;
uniform float			smoothingRadius;
uniform float			invSmoothingRadius;
uniform float			smoothingDerivateScale;
uniform float			waterMass;
uniform int				gridW;
uniform int				gridH;
uniform int				gridD;
uniform int				idHsize;
uniform int				gridSize;
uniform int				positionsSize;
uniform samplerBuffer	predictedPositionsBuffer;
uniform samplerBuffer	densitiesBuffer;
uniform samplerBuffer	pressuresBuffer;


float	vecLength(vec3 vec)
{
	return (sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z));
}


float	smoothingKernelDerivate(float dst)
{
	if (dst > smoothingRadius)
		return (0.0);

	return ((dst - smoothingRadius) * smoothingDerivateScale);
}


float	calculateSharedPressure(float pressureA, float pressureB)
{
	return ((pressureA + pressureB) * 0.5);
}


vec3	calculatePressureForce(int particleIndex, float invDensity)
{
	float	pressure, pressureWater,
			dst, slope, sharedPressure;
	int		px, py, pz, gx, gy, gz, gid, nbParticleInCell, waterId;
	vec3	pressureForce, position, positionWater, dir;

	pressureForce = vec3(0.0, 0.0, 0.0);

	position = texelFetch(predictedPositionsBuffer, particleIndex).rgb;
	pressure = texelFetch(pressuresBuffer, particleIndex).r;
	px = int(position.x * invSmoothingRadius);
	py = int(position.y * invSmoothingRadius);
	pz = int(position.z * invSmoothingRadius);

	for (int cx = -1; cx <= 1; cx++)
	{
		gx = px + cx;
		if (gx < 0 || gx >= gridW)
			continue;

		for (int cy = -1; cy <= 1; cy++)
		{
			gy = py + cy;
			if (gy < 0 || gy >= gridH)
				continue;

			for (int cz = -1; cz <= 1; cz++)
			{
				gz = pz + cz;
				if (gz < 0 || gz >= gridD)
					continue;

				gid = gx + gz * gridW + gy * idHsize;
				nbParticleInCell = gridBuffer[gid];
				for (int i = 0; i < nbParticleInCell; i++)
				{
					gid += gridSize;
					waterId = gridBuffer[gid];
					if (waterId == particleIndex)
						continue;

					positionWater = texelFetch(predictedPositionsBuffer, waterId).rgb;
					pressureWater = texelFetch(pressuresBuffer, waterId).r;

					dir = positionWater - position;
					dst = vecLength(dir);
					if (dst == 0.0)
						dir = vec3(0.0, 1.0, 0.0);
					else
						dir /= dst;
					slope = smoothingKernelDerivate(dst);
					sharedPressure = calculateSharedPressure(pressure, pressureWater);
					pressureForce += sharedPressure * dir * slope;
				}
			}
		}
	}

	return (pressureForce * waterMass * invDensity);
}


void main()
{
	int		particleIndex;
	float	density, invDensity;
	vec3	position, velocity, pressureForce, pressureAcceleration, viscosityForce;

	particleIndex = int(gl_GlobalInvocationID.x);
	if (particleIndex >= positionsSize)
		return ;

	density = texelFetch(densitiesBuffer, particleIndex).r;

	if (density != 0.0)
	{
		invDensity = 1.0 / density;
		velocity = imageLoad(velocitiesBuffer, particleIndex).rgb;

		pressureForce = calculatePressureForce(particleIndex, invDensity);
		pressureAcceleration = pressureForce * invDensity;

		velocity += pressureAcceleration * delta;
	}
	else
		velocity = vec3(0.0, 0.0, 0.0);

	// Write the value to the buffer
	imageStore(velocitiesBuffer, particleIndex, vec4(velocity, 1.0));
}
