#version 430 core

layout (local_size_x = 8, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform imageBuffer velocitiesBuffer;
layout(std430, binding = 1) readonly buffer DataBuffer {
	int gridBuffer[];
};

uniform float			delta;
uniform float			smoothingRadius;
uniform float			smoothingRadius2;
uniform float			smoothingDerivateScale;
uniform float			smoothingViscosityScale;
uniform float			waterMass;
uniform float			waterRadius2;
uniform float			viscosityStrength;
uniform int				gridW;
uniform int				gridH;
uniform int				gridD;
uniform int				idHsize;
uniform int				offsetsSize;
uniform samplerBuffer	predictedPositionsBuffer;
uniform samplerBuffer	densitiesBuffer;
uniform samplerBuffer	pressuresBuffer;


float	vecLength(vec3 vec)
{
	return (sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z));
}


float	vecLength2(vec3 vec)
{
	return (vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}


float	smoothingKernelDerivate(float dst)
{
	if (dst > smoothingRadius)
		return (0.0);

	return ((dst - smoothingRadius) * smoothingDerivateScale);
}


float	viscositySmoothingKernel(float dst2)
{
	float	value;

	if (dst2 > smoothingRadius2)
		return (0.0);

	value = waterRadius2 - dst2;
	return ((value * value * value) * smoothingViscosityScale);
}


float	calculateSharedPressure(float pressureA, float pressureB)
{
	return ((pressureA + pressureB) / 2.0);
}


vec3	calculatePressureForce(int particleIndex)
{
	float	density, densityWater, pressure, pressureWater,
			dst, slope, sharedPressure;
	int		px, py, pz, gx, gy, gz, gid, nbParticleInCell, waterId, weirdDirection;
	vec3	pressureForce, position, positionWater, dir;

	pressureForce = vec3(0.0, 0.0, 0.0);

	position = texelFetch(predictedPositionsBuffer, particleIndex).rgb;
	density = texelFetch(densitiesBuffer, particleIndex).r;
	pressure = texelFetch(pressuresBuffer, particleIndex).r;
	px = int(position.x / smoothingRadius);
	py = int(position.y / smoothingRadius);
	pz = int(position.z / smoothingRadius);

	for (int cx = -1; cx <= 1; cx++)
	{
		gx = px + cx;
		if (gx < 0 || gx >= gridW)
			continue;

		for (int cy = -1; cy <= 1; cy++)
		{
			gy = py + cy;
			if (gy < 0 || gy >= gridH)
				continue;

			for (int cz = -1; cz <= 1; cz++)
			{
				gz = pz + cz;
				if (gz < 0 || gz >= gridD)
					continue;

				gid = gx + gz * gridW + gy * idHsize;
				nbParticleInCell = gridBuffer[gid];
				for (int i = 0; i < nbParticleInCell; i++)
				{
					gid += offsetsSize;
					waterId = gridBuffer[gid];
					if (waterId == particleIndex)
						continue;

					positionWater = texelFetch(predictedPositionsBuffer, waterId).rgb;
					pressureWater = texelFetch(pressuresBuffer, waterId).r;

					dir = positionWater - position;
					dst = vecLength(dir);
					if (dst < 0.1)
					{
						weirdDirection = waterId % 5;
						switch (weirdDirection )
						{
							case 0:
								dir = vec3(0.0, 0.0, 1.0);
								break;
							case 1:
								dir = vec3(1.0, 0.0, 0.0);
								break;
							case 2:
								dir = vec3(-1.0, 0.0, 0.0);
								break;
							case 3:
								dir = vec3(0.0, 0.0, 1.0);
								break;
							case 4:
								dir = vec3(0.0, 0.0, -1.0);
								break;
						}
					}
					else
						dir /= dst;
					slope = smoothingKernelDerivate(dst);
					sharedPressure = calculateSharedPressure(pressure, pressureWater);
					pressureForce += sharedPressure * dir * slope;
				}
			}
		}
	}

	return (pressureForce * waterMass / density);
}

vec3	calculateViscosityForce(int particleIndex)
{
	float	velocityLength, dst2, influence;
	int		px, py, pz, gx, gy, gz, gid, nbParticleInCell, waterId, weirdDirection;
	vec3	viscosityForce, position, positionWater, velocity, velocityWater, velocityDir;

	viscosityForce = vec3(0.0, 0.0, 0.0);

	position = texelFetch(predictedPositionsBuffer, particleIndex).rgb;
	velocity = imageLoad(velocitiesBuffer, particleIndex).rgb;
	px = int(position.x / smoothingRadius);
	py = int(position.y / smoothingRadius);
	pz = int(position.z / smoothingRadius);

	for (int cx = -1; cx <= 1; cx++)
	{
		gx = px + cx;
		if (gx < 0 || gx >= gridW)
			continue;

		for (int cy = -1; cy <= 1; cy++)
		{
			gy = py + cy;
			if (gy < 0 || gy >= gridH)
				continue;

			for (int cz = -1; cz <= 1; cz++)
			{
				gz = pz + cz;
				if (gz < 0 || gz >= gridD)
					continue;

				gid = gx + gz * gridW + gy * idHsize;
				nbParticleInCell = gridBuffer[gid];
				for (int i = 0; i < nbParticleInCell; i++)
				{
					gid += offsetsSize;
					waterId = gridBuffer[gid];
					if (waterId == particleIndex)
						continue;

					positionWater = texelFetch(predictedPositionsBuffer, waterId).rgb;
					velocityWater = imageLoad(velocitiesBuffer, waterId).rgb;

					velocityDir = velocityWater - velocity;
					dst2 = vecLength2(position - positionWater);
					if (dst2 < 0.001)
					{
						weirdDirection = waterId % 5;
						switch (weirdDirection  )
						{
							case 0:
								velocityDir = vec3(0.0, 0.0, 1.0);
								break;
							case 1:
								velocityDir = vec3(1.0, 0.0, 0.0);
								break;
							case 2:
								velocityDir = vec3(-1.0, 0.0, 0.0);
								break;
							case 3:
								velocityDir = vec3(0.0, 0.0, 1.0);
								break;
							case 4:
								velocityDir = vec3(0.0, 0.0, -1.0);
								break;
						}
					}
					influence = viscositySmoothingKernel(dst2);
					viscosityForce += velocityDir * influence;
				}
			}
		}
	}

	return (viscosityForce * viscosityStrength);
}

void main()
{
	int		particleIndex;
	float	density;
	vec3	velocity, pressureForce, pressureAcceleration, viscosityForce;

	particleIndex = int(gl_GlobalInvocationID.x);
	density = texelFetch(densitiesBuffer, particleIndex).r;

	if (density != 0.0)
	{
		velocity = imageLoad(velocitiesBuffer, particleIndex).rgb;
		pressureForce = calculatePressureForce(particleIndex);
		pressureAcceleration = pressureForce / density;
		velocity += pressureAcceleration * delta;

		viscosityForce = calculateViscosityForce(particleIndex);
		velocity += viscosityForce * delta;
	}
	else
		velocity = vec3(0.0, 0.0, 0.0);

	// Write the value to the buffer
	imageStore(velocitiesBuffer, particleIndex, vec4(velocity, 1.0));
}
