#version 430 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer DataBuffer {
	int gridBuffer[];
};

uniform float			smoothingRadius;
uniform float			invSmoothingRadius;
uniform int				gridW;
uniform int				idHsize;
uniform int				gridSize;
uniform int				positionsSize;
uniform samplerBuffer	positionsBuffer;

void main()
{
	int		gx, gy, gz, gid, gridId, particlesInCell;
	vec3	particlePos;

	for (int i = 0; i < gridSize; i++)
		gridBuffer[i] = 0;

	// Put particles into grid
	for (int i = 0; i < positionsSize; i++)
	{
		particlePos = texelFetch(positionsBuffer, i).rgb;

		gx = int(particlePos.x * invSmoothingRadius);
		gy = int(particlePos.y * invSmoothingRadius);
		gz = int(particlePos.z * invSmoothingRadius);
		gid = gx + gz * gridW + gy * idHsize;

		particlesInCell = gridBuffer[gid];
		if (particlesInCell >= 1000)
			continue;

		particlesInCell++;
		gridId = gid + gridSize * particlesInCell;
		gridBuffer[gridId] = i;
		gridBuffer[gid] = particlesInCell;
	}
}
