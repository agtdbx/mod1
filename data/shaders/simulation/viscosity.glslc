#version 430 core

layout (local_size_x = 8, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform imageBuffer velocitiesBuffer;
layout(std430, binding = 1) readonly buffer DataBuffer {
	int gridBuffer[];
};

uniform float			delta;
uniform float			smoothingRadius;
uniform float			smoothingRadius2;
uniform float			smoothingViscosityScale;
uniform float			waterRadius2;
uniform float			viscosityStrength;
uniform int				gridW;
uniform int				gridH;
uniform int				gridD;
uniform int				idHsize;
uniform int				gridSize;
uniform int				positionsSize;
uniform samplerBuffer	predictedPositionsBuffer;
uniform samplerBuffer	densitiesBuffer;


float	vecLength(vec3 vec)
{
	return (sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z));
}


float	vecLength2(vec3 vec)
{
	return (vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
}


float	viscositySmoothingKernel(float dst2)
{
	float	value;

	if (dst2 > smoothingRadius2)
		return (0.0);

	value = waterRadius2 - dst2;
	return ((value * value * value) * smoothingViscosityScale);
}


vec3	calculateViscosityForce(int particleIndex)
{
	float	velocityLength, dst2, influence;
	int		px, py, pz, gx, gy, gz, gid, nbParticleInCell, waterId;
	vec3	viscosityForce, position, positionWater, velocity, velocityWater, velocityDir;

	viscosityForce = vec3(0.0, 0.0, 0.0);

	position = texelFetch(predictedPositionsBuffer, particleIndex).rgb;
	velocity = imageLoad(velocitiesBuffer, particleIndex).rgb;
	px = int(position.x / smoothingRadius);
	py = int(position.y / smoothingRadius);
	pz = int(position.z / smoothingRadius);

	for (int cx = -1; cx <= 1; cx++)
	{
		gx = px + cx;
		if (gx < 0 || gx >= gridW)
			continue;

		for (int cy = -1; cy <= 1; cy++)
		{
			gy = py + cy;
			if (gy < 0 || gy >= gridH)
				continue;

			for (int cz = -1; cz <= 1; cz++)
			{
				gz = pz + cz;
				if (gz < 0 || gz >= gridD)
					continue;

				gid = gx + gz * gridW + gy * idHsize;
				nbParticleInCell = gridBuffer[gid];
				for (int i = 0; i < nbParticleInCell; i++)
				{
					gid += gridSize;
					waterId = gridBuffer[gid];
					if (waterId == particleIndex)
						continue;

					positionWater = texelFetch(predictedPositionsBuffer, waterId).rgb;
					velocityWater = imageLoad(velocitiesBuffer, waterId).rgb;

					velocityDir = velocityWater - velocity;
					dst2 = vecLength2(position - positionWater);
					influence = viscositySmoothingKernel(dst2);
					viscosityForce += velocityDir * influence;
				}
			}
		}
	}

	return (viscosityForce * viscosityStrength);
}

void main()
{
	int		particleIndex;
	float	density;
	vec3	velocity, pressureForce, pressureAcceleration, viscosityForce;

	particleIndex = int(gl_GlobalInvocationID.x);
	if (particleIndex >= positionsSize)
		return ;

	density = texelFetch(densitiesBuffer, particleIndex).r;

	if (density != 0.0)
	{
		velocity = imageLoad(velocitiesBuffer, particleIndex).rgb;
		viscosityForce = calculateViscosityForce(particleIndex);
		velocity += viscosityForce * delta;
	}
	else
		velocity = vec3(0.0, 0.0, 0.0);

	// Write the value to the buffer
	imageStore(velocitiesBuffer, particleIndex, vec4(velocity, 1.0));
}
